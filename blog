#!/bin/bash
########## Settings
PUBLISH=0
IMDFS=()
PROMPT="blog"
PUBLISHDIR=posts
DRAFTSDIR=drafts
TITLE="new post"
#
STATCMD="stat -f %z "
test "`uname`" == "Linux" && STATCMD="stat -c %s " #same but for linux
STATMINSZ=300 #in case we remove content from an already published post, the updated post must be at least 301 bytes in size. Less prob. means we don't really want to do it.
########## Code
usage(){
cat<<EOU
Usage: $0 [-h|--help] [-p|--publish post.md ] [-e|--edit|--new title] 

OPTIONS
-h, --help			This help
-e, --edit, --new title		Edits post with title 'title' (including spaces as it was originally defined). If no posts exists with this title it creates it anew. 
				'title' can also be the filename (html or md versions) of the post. This command creates the markdown draft file with the post contents.
				If the title is new, it does not render it! Only the markdown file will be created.
				Title can have white spaces; doesn't need to be surounded by quotation marks. Creates a draft posts title.md with spaces substituted by hyphens.
-b, --blog post.md		Converts the draft post post.md into a html page within posts folder, ready to be read by your browser. Does not update index.html nor latest.html.
-p, --publish post.md		Updates the index.html and latest.html to point include post.md and update the link to the latest post.
  , --latest			Update latest post.
EOU
}
parse(){
[ $# -eq 0 ] && usage && exit
while [ $# -gt 0 ] ; do
	case $1 in
		-h|-help|--help) usage ; exit ;;
		-b|--blog) shift;;
		-p|--publish) shift ; PUBLISH=1;;
		-e|--edit|--new) shift; TITLE="$@"; 
			while [ $# -gt 0 ] ; do shift ;done ;
			editPost ; exit ;;
		--latest) shift ; updateLatest ; exit ;;
		*) IMDFS=( ${IMDFS[@]} "$1" ) ; shift ;;
	esac
done
}

editPost(){
#In OSX cmd file has a buggy return value (always 0, even if file doesn't exists). Thus we need to check if TITLE refers to an existing file in another way.
if test "$(echo $TITLE | sed 's@.*.md@1@g' | sed 's@.*.html@1@g')" == "1" ; then 
	fn="$(basename $(echo $TITLE| sed 's@.html@.md@g') )"
	TITLE="$(basename "$TITLE"| sed 's@.md$@@g'|sed 's@.html$@@g'| cut -d '-' -f 4-|sed 's@-@ @g')"
else
	fn="$(echo "$(date +"%Y-%m-%d-")$TITLE.md"| sed 's@[[:space:]]@-@g')"
fi
isOLD=1	
cmsg "editPost: editing '$fn'"
#[ -s "$DRAFTSDIR/$fn" ] || { isOLD=0 ; fn=$(echo "$(date +"%Y-%m-%d-")$TITLE.md"| sed 's@[[:space:]]@-@g') ;  echo -e "# $TITLE\n\n" > $DRAFTSDIR/$fn ;}
[ -s "$DRAFTSDIR/$fn" ] || { isOLD=0 ; echo -e "# $TITLE\n$(date)\n\n" > "$DRAFTSDIR/$fn" ;}
[ -s "$DRAFTSDIR/$fn" ] || errmsg "editPost: ERROR: Couldn't open file $DRAFTSDIR/$fn"
osz="$(eval $STATCMD $DRAFTSDIR/$fn )"
cmsg "editPost: bytes ($STATCMD) : $osz"
vi + "$DRAFTSDIR/$fn"
nsz="$(eval $STATCMD $DRAFTSDIR/$fn )"
if [ `cat "$DRAFTSDIR/$fn"| wc -w` -lt 10 ] && [ `cat "$DRAFTSDIR/$fn"| wc -l` -lt 6 ] ; then
	cmsg "Would you like to remove this draft $DRAFTSDIR/$fn? [y/N]"
	read ans; 
	case $ans in
		y|yes|Y|Yes|YES)  rm "$DRAFTSDIR/$fn" 		#the basic heading is 2 word long, has 11 characters and extends over 3 lines (2blank). Removing if there was nothing added to it
	esac
fi
if [ $nsz -ne $osz ] ; then 
	cmsg "editPost: $DRAFTSDIR/$fn"
else
	cmsg "editPost: Editing cancelled." ; exit
fi
#[ $isOLD -eq 1 ] && IMDFS=( "$DRAFTSDIR/$fn" ) && PUBLISH=0 && blogIt
IMDFS=( "$DRAFTSDIR/$fn" ) && blogIt
}

# blogIt is the main method which is always called when running script
# Also, it _always_ renders the markdown file into an html file: We want to be able to see locally how things look at any time!
blogIt(){	# [fn.md] -> IO() [draft/fn.html] {[post/fn.html]} 
for f in ${IMDFS[@]} ; do
	OUT=""
	[ -s "$f" ] || errmsg "blogIt: file not found $f"
	render "$f"	# render: fn.md -> IO() OUTF(=fn.html)
	[ $PUBLISH -eq 1 ] && publish "$OUTF"
done
}

#Check whether we are editing a new post or one that already exists.
isNewPost(){ # OUTF -> int={1,0} 
	if [ -s $PUBLISHDIR/$(basename $1) ] ; then 
		return 1
	else
		return 0
	fi
}

isNewEdit(){
	if [ -s $PUBLISHDIR/$(basename $1) ] ; then 
		cmsg "...detected previously published post $PUBLISHDIR/$(basename $1)"
		osz="$(eval $STATCMD $PUBLISHDIR/$(basename $1) )"
		nsz="$(eval $STATCMD $1 )"
		if [ $nsz -ne $osz ] && [ $nsz -gt $STATMINSZ ] ; then 
			cmsg "...detected updated contents from $1."
			return 0
		fi
		cmsg "...no new content added."
	fi
	return 1

}

publish(){ # OUTF (=drafts/fn.html) -> IO() index.html latest.html
[ $# -ne 1 ] && errmsg "publish: Wrong number of arguments $@"
cmsg "publish: into $PUBLISHDIR"
cmsg "publish: Publishing $1"
[ -d $PUBLISHDIR ] || errmsg "publish: Missing posts directory $PUBLISHDIR"
isNewEdit "$1" && mv "$1" $PUBLISHDIR
test "$(basename $1)" == "$(ls -rtc $PUBLISHDIR| sort| tail -1)" && updateLatest #If we have edited the latest post, update latest link.
cmsg "publish: updating blog" && updateBlog "$1"	#update index and latest only if it's a new post, and not just editing an already existing one.
}

updateBlog(){	#fn.html -> IO() index.html $PUBLISHDIR/latest.html
isNewPost "$1" &&  updateIndex "$1"  #if it's an edit of latet post, we already have in the index
updateLatest
}

updateIndex(){	#fn.html -> IO() index.html
cmsg "publish: updating index..."
# insert post into index.html
fn=`basename $1`
day=`echo "$fn"| cut -d "-" -f 3`
month=$( date -j -f "%m" $(echo "$fn"| cut -d "-" -f 2) +"%b" )
year=`echo "$fn"| cut -d "-" -f 1| sed 's@.*/@@g'`
tit=`echo "$fn"| cut -d "-" -f 4-| sed 's@.md@@g'`
cmsg "publish: Backing up index.html..."
cp -a index.html .blog.index.thml.bkp
if [ -s .blog.index.thml.bkp ] ; then
 cat .blog.index.thml.bkp | sed 's@\(<ul class="posts">\)@\1\n<li><span>'$day' '$month' '$year'</span> \&raquo; <a href="'$(basename $PUBLISHDIR)'/'$fn'">'$tit'</a></li>@g' > index.html
 cmsg "publish: Inserted new post entry $tit in index.html"
else
 cmsg "publish: WARNING: couldn't generate backup .blog.index.thml.bkp: Failed to insert post entry into index.html"
fi
[ $? -eq 0 ] || errmsg "publish: Something went wrong when updating index.html"
}

updateLatest(){		# IO() $PUBLISHDIR/latest.html
cmsg "publish: updating latest..."
[ -f $PUBLISHDIR/latest.html ] && rm $PUBLISHDIR/latest.html
#Update latest.html post link
#ln $PUBLISHDIR/$fn $PUBLISHDIR/latest.html
ln $PUBLISHDIR/$(ls -rtc $PUBLISHDIR| sort| tail -1) $PUBLISHDIR/latest.html
}
render(){ 	#f.md -> IO() OUTF(=f.html) 
[ $# -ne 1 ] && errmsg "render : missing input file"
OUTF=$(echo $1| sed "s@.md@.html@g")
echo -e "\
<!doctype html>
<head>
<style>
pre { background:beige;width:80%;margin:3em;padding:1em}
code {color:maroon;}
</style></head>
<body>" > "$OUTF"
#pandoc -f markdown_github -t html5 -o "$OUTF" "$1"
pandoc -f markdown_github -t html5  "$1" >> "$OUTF"
[ $? -ne 0 ] && cmsg "render: WARNING: Something went wrong when rendering into html file $1 -> $OUTF"
echo -e "</body>\n</html>" >> "$OUTF"
cmsg "render: ok... $OUTF"
}

cmsg(){
echo "$PROMPT: $@"
}
errmsg(){
cmsg "ERROR: $@"
exit 1
}

main(){
parse $@
blogIt
cmsg "Done"
}
main $@
